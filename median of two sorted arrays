class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()==0){
            if(nums2.size()%2==0){
                return (nums2[nums2.size()/2]+nums2[nums2.size()/2-1])/2.0;
            }else return nums2[nums2.size()/2];
        }
        else if(nums2.size()==0)
           {
            if(nums1.size()%2==0){
                return (nums1[nums1.size()/2]+nums1[nums1.size()/2-1])/2.0;
            }else return nums1[nums1.size()/2];
        }
        if(nums1.size()>nums2.size())
            findMedianSortedArrays(nums2,nums1);
        int low=0,high=nums1.size();
        int medianposition=(nums1.size()+nums2.size()+1)/2;
        while(low<=high){
            int cut1=(low+high)/2.0;
            int cut2=medianposition-cut1;
            //i will pick median elements from the first array
            //and remaining from the second
            int l1=cut1==0?INT_MIN:nums1[cut1-1];
            int l2=cut2==0?INT_MIN:nums2[cut2-1];
            int r1=cut1==nums1.size()?INT_MAX:nums1[cut1];
            int r2=cut2==nums2.size()?INT_MAX:nums2[cut2];
            if(l1<=r2 && l2<=r1){
                if((nums1.size()+nums2.size())%2!=0){
                    return max(l1,l2);
                }else return (max(l1,l2)+min(r1,r2))/2.0;
            }
            else if(l1>r2)high--;
            else low++;
        }
        return 0.0;
        
    
    }
};
